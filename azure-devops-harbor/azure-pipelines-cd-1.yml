# This is the first pipeline in the set of two pipelines.

# It is responsible for trigging a TBS build when code is commited
# to the main branch.

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Run_CI_Tests
  jobs:
    - job: 
      steps:
        # We're just doing a build image here to 
        # run all the tests for simplicity sake,
        # but this is where you could insert any test 
        # steps you wanted to run before TBS is triggered to 
        # build the image
        - script: ./mvnw spring-boot:build-image

- stage: Image_Build
  jobs:
    # Trigger the image build by running a 'kp image patch' and passing the Commit SHA from the pipeline system variable
    # to TBS.  We do this with kpack, but you could easily do it with a kubectl `patch` as well.  Doing it that way would
    # prevent you from having to download pivnet, authenticating, then downloading kpack.  
    - job: Image_Build_Job
      steps:
        # Here, we're going to download the pivnet cli and authenticate to the tanzu network so that we can download the
        # kpack cli.  We authenticate using the secret variable provided to the pipeline.
        - script: |
            curl -L https://github.com/pivotal-cf/pivnet-cli/releases/download/v3.0.1/pivnet-linux-amd64-3.0.1 -o pivnet
            chmod u+x pivnet
          displayName: 'Download Tanzu Network CLI'
        - script: ./pivnet login --api-token $(api-token)
          displayName: 'Log in to the Tanzu Network'
        - script: | 
            ./pivnet download-product-files --product-slug='build-service' --release-version='1.2.1' --product-file-id=970671
            mv kp-linux-0.3.0 kp
            chmod u+x kp
          displayName: 'Download kpack cli'
        # kpack requires kubectl to be setup, and we can't use the 
        # service connection because the kubectl task creates and deletes
        # the kubectl file during each task so we must manually create 
        # a kubectl config file from the variables that are provided to the
        # pipeline
        - script: |
            kubectl config set-cluster demo --server=$(k8s-server)
            kubectl config set-credentials azure-pipelines --token=$(k8s-token)
            kubectl config set-context demo --user=azure-pipelines --cluster=demo
            kubectl config set-cluster demo --embed-certs --certificate-authority <(echo $(k8s-ca-crt-b64) | base64 --decode)
            kubectl config use-context demo
          displayName: Setup Kubectl
        # Patch the image with the git commit sha so that TBS will build the image.
        - script: | 
            ./kp image patch --git-revision=$(Build.SourceVersion) --wait spring-petclinic
          displayName: Patch Image Commit SHA